import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import api from "../api/axios";
import { useAuth } from "../context/AuthContext";

export default function GroupDetail() {
  const { id } = useParams(); // group id
  const { user } = useAuth();
  const navigate = useNavigate();

  const [group, setGroup] = useState(null);
  const [members, setMembers] = useState([]);
  const [openUsers, setOpenUsers] = useState([]);
  const [sentInvites, setSentInvites] = useState([]);

  const [editingName, setEditingName] = useState(false);
  const [newName, setNewName] = useState("");

  const isOwner = group?.owner_id === user?.id;

  useEffect(() => {
    loadGroup();
    if (isOwner) {
      loadOpenUsers();
    }
  }, [id]);

  const loadGroup = async () => {
    try {
      const res = await api.get(`/groups/${id}`);
      setGroup(res.data);
      setMembers(res.data.members || []);
      setNewName(res.data.name);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø—ã:", err);
    }
  };

  const loadOpenUsers = async () => {
    try {
      const [openRes, invitesRes] = await Promise.all([
        api.get("/users/open_to_collab"),
        api.get(`/groups/${id}/invitations/sent`),
      ]);
      setOpenUsers(openRes.data);
      setSentInvites(invitesRes.data.map((inv) => inv.receiver_id));
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", err);
    }
  };

  const inviteUser = async (userId) => {
    try {
      await api.post("/groups/invitations/send", {
        group_id: parseInt(id),
        receiver_id: userId,
        sender_id: user.id,
        message: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ!",
      });
      setSentInvites((prev) => [...prev, userId]);
      alert("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", err);
    }
  };

  const leaveGroup = async () => {
    try {
      await api.post(`/groups/${id}/leave`);
      navigate("/groups");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã:", err);
    }
  };

  const removeMember = async (memberId) => {
    try {
      await api.delete(`/groups/${id}/members/${memberId}`);
      await loadGroup();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:", err);
    }
  };

  const updateGroupName = async () => {
    try {
      await api.put(`/groups/${id}`, { name: newName });
      setEditingName(false);
      await loadGroup();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:", err);
    }
  };

  if (!group) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø—ã...</div>;

  return (
    <div className="p-6 space-y-4 max-w-3xl mx-auto">
      <div className="flex justify-between items-center">
        {editingName ? (
          <div className="flex gap-2 items-center">
            <input
              value={newName}
              onChange={(e) => setNewName(e.target.value)}
              className="border px-2 py-1 rounded"
            />
            <button onClick={updateGroupName} className="btn-blue">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button onClick={() => setEditingName(false)} className="text-red-500">
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        ) : (
          <>
            <h1 className="text-2xl font-bold">{group.name}</h1>
            {isOwner && (
              <button onClick={() => setEditingName(true)} className="btn-blue">
                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
            )}
          </>
        )}
      </div>

      <h2 className="text-lg font-semibold">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:</h2>
      <ul className="list-disc ml-6 space-y-1 text-sm">
        {members.map((member) => (
          <li key={member.id} className="flex justify-between items-center">
            {member.username} ({member.email})
            {isOwner && member.id !== user.id && (
              <button
                onClick={() => removeMember(member.id)}
                className="text-red-500 text-xs hover:underline"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            )}
          </li>
        ))}
      </ul>

      {!isOwner && (
        <button
          onClick={leaveGroup}
          className="bg-red-600 text-white px-4 py-1 rounded mt-4"
        >
          –ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É
        </button>
      )}

      {isOwner && (
        <div className="mt-6">
          <h3 className="text-md font-semibold mb-2">üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h3>
          {openUsers.length === 0 ? (
            <p className="text-sm text-gray-500">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏</p>
          ) : (
            <ul className="space-y-2">
              {openUsers
                .filter(
                  (u) => !members.some((m) => m.id === u.id) && !sentInvites.includes(u.id)
                )
                .map((user) => (
                  <li key={user.id} className="flex justify-between items-center">
                    <span>
                      {user.full_name || user.username} ({user.email})
                    </span>
                    <button
                      onClick={() => inviteUser(user.id)}
                      className="bg-blue-600 text-white text-sm px-3 py-1 rounded"
                    >
                      ‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å
                    </button>
                  </li>
                ))}
            </ul>
          )}
        </div>
      )}
    </div>
  );
}
